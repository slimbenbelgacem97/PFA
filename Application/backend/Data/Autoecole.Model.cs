//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 4/7/2021 11:58:15 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using backend.Models;
using Microsoft.Extensions.Configuration;

namespace backend.Data
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Candidat> Candidats
        {
            get;
            set;
        }

        public virtual DbSet<Agent> Agents
        {
            get;
            set;
        }

        public virtual DbSet<LoginAgents> LoginAgents
        {
            get;
            set;
        }

        public virtual DbSet<Vehicle> Vehicles
        {
            get;
            set;
        }

        public virtual DbSet<Seances> Seances
        {
            get;
            set;
        }

        public virtual DbSet<Exam> Exams
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.CandidatMapping(modelBuilder);
            this.CustomizeCandidatMapping(modelBuilder);

            this.AgentMapping(modelBuilder);
            this.CustomizeAgentMapping(modelBuilder);

            this.LoginAgentsMapping(modelBuilder);
            this.CustomizeLoginAgentsMapping(modelBuilder);

            this.VehicleMapping(modelBuilder);
            this.CustomizeVehicleMapping(modelBuilder);

            this.SeancesMapping(modelBuilder);
            this.CustomizeSeancesMapping(modelBuilder);

            this.ExamMapping(modelBuilder);
            this.CustomizeExamMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Candidat Mapping

        private void CandidatMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Candidat>().ToTable(@"Candidats");
            modelBuilder.Entity<Candidat>().Property(x => x.CandidatCIN).HasColumnName(@"CandidatCIN").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidat>().Property(x => x.Nom).HasColumnName(@"Nom").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidat>().Property(x => x.Prenom).HasColumnName(@"Prenom").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidat>().Property(x => x.Naissance).HasColumnName(@"Naissance").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidat>().Property(x => x.Adresse).HasColumnName(@"Adresse").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidat>().Property(x => x.Tel).HasColumnName(@"Tel").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Candidat>().HasKey(@"CandidatCIN");
        }

        partial void CustomizeCandidatMapping(ModelBuilder modelBuilder);

        #endregion

        #region Agent Mapping

        private void AgentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Agent>().ToTable(@"Agents");
            modelBuilder.Entity<Agent>().Property(x => x.AgentCIN).HasColumnName(@"AgentCIN").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property(x => x.Nom).HasColumnName(@"Nom").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property(x => x.Prenom).HasColumnName(@"Prenom").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property(x => x.DateEmb).HasColumnName(@"DateEmb").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property(x => x.Adresse).HasColumnName(@"Adresse").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property(x => x.Salaire).HasColumnName(@"Salaire").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property(x => x.Fonction).HasColumnName(@"Fonction").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property<string>(@"Immatricule").HasColumnName(@"Immatricule").ValueGeneratedNever();
            modelBuilder.Entity<Agent>().HasKey(@"AgentCIN");
        }

        partial void CustomizeAgentMapping(ModelBuilder modelBuilder);

        #endregion

        #region LoginAgents Mapping

        private void LoginAgentsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LoginAgents>().ToTable(@"LoginAgents");
            modelBuilder.Entity<LoginAgents>().Property<int>(@"AgentCIN").HasColumnName(@"AgentCIN").ValueGeneratedNever();
            modelBuilder.Entity<LoginAgents>().Property(x => x.Password).HasColumnName(@"Password").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoginAgents>().HasKey(@"AgentCIN");
        }

        partial void CustomizeLoginAgentsMapping(ModelBuilder modelBuilder);

        #endregion

        #region Vehicle Mapping

        private void VehicleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Vehicle>().ToTable(@"Vehicles");
            modelBuilder.Entity<Vehicle>().Property(x => x.Immatricule).HasColumnName(@"Immatricule").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Vehicle>().Property(x => x.Marque).HasColumnName(@"Marque").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Vehicle>().Property(x => x.DateCirculation).HasColumnName(@"DateCirculation").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Vehicle>().Property<int>(@"AgentCIN").HasColumnName(@"AgentCIN").ValueGeneratedNever();
            modelBuilder.Entity<Vehicle>().HasKey(@"Immatricule");
        }

        partial void CustomizeVehicleMapping(ModelBuilder modelBuilder);

        #endregion

        #region Seances Mapping

        private void SeancesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Seances>().ToTable(@"Seances");
            modelBuilder.Entity<Seances>().Property(x => x.DateSeance).HasColumnName(@"DateSeance").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Seances>().Property<int>(@"CandidatCIN").HasColumnName(@"CandidatCIN").ValueGeneratedNever();
            modelBuilder.Entity<Seances>().Property<int>(@"AgentCIN").HasColumnName(@"AgentCIN").ValueGeneratedNever();
            modelBuilder.Entity<Seances>().Property(x => x.SeanceType).HasColumnName(@"SeanceType").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Seances>().HasKey(@"DateSeance", @"CandidatCIN", @"AgentCIN");
        }

        partial void CustomizeSeancesMapping(ModelBuilder modelBuilder);

        #endregion

        #region Exam Mapping

        private void ExamMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Exam>().ToTable(@"Exams");
            modelBuilder.Entity<Exam>().Property(x => x.Convocation).HasColumnName(@"Convocation").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Exam>().Property(x => x.List).HasColumnName(@"List").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Exam>().Property(x => x.DateExam).HasColumnName(@"DateExam").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Exam>().Property(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Exam>().Property<int>(@"CandidatCIN").HasColumnName(@"CandidatCIN").ValueGeneratedNever();
            modelBuilder.Entity<Exam>().HasKey(@"Convocation");
        }

        partial void CustomizeExamMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Candidat>().HasMany(x => x.Seances).WithOne(op => op.Candidat).HasForeignKey(@"CandidatCIN").IsRequired(true);
            modelBuilder.Entity<Candidat>().HasMany(x => x.Exams).WithOne(op => op.Candidat).HasForeignKey(@"CandidatCIN").IsRequired(true);

            modelBuilder.Entity<Agent>().HasOne(x => x.LoginAgent).WithOne(op => op.Agent).HasForeignKey(typeof(LoginAgents), @"AgentCIN").IsRequired(true);
            modelBuilder.Entity<Agent>().HasOne(x => x.Vehicle).WithOne(op => op.Agent).HasForeignKey(typeof(Vehicle), @"AgentCIN").IsRequired(true);
            modelBuilder.Entity<Agent>().HasMany(x => x.Seances).WithOne(op => op.Agent).HasForeignKey(@"AgentCIN").IsRequired(true);

            modelBuilder.Entity<LoginAgents>().HasOne(x => x.Agent).WithOne(op => op.LoginAgent).HasForeignKey(typeof(LoginAgents), @"AgentCIN").IsRequired(true);

            modelBuilder.Entity<Vehicle>().HasOne(x => x.Agent).WithOne(op => op.Vehicle).HasForeignKey(typeof(Vehicle), @"AgentCIN").IsRequired(true);

            modelBuilder.Entity<Seances>().HasOne(x => x.Candidat).WithMany(op => op.Seances).HasForeignKey(@"CandidatCIN").IsRequired(true);
            modelBuilder.Entity<Seances>().HasOne(x => x.Agent).WithMany(op => op.Seances).HasForeignKey(@"AgentCIN").IsRequired(true);

            modelBuilder.Entity<Exam>().HasOne(x => x.Candidat).WithMany(op => op.Exams).HasForeignKey(@"CandidatCIN").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
